{"version":3,"sources":["config.js","Map.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","REACT_APP_MAPBOX_ACCESS_TOKEN","require","ReactMap","ReactMapboxGl","accessToken","mapboxProps","style","zoom","containerStyle","height","width","Map","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onMapLoaded","map","addControl","draw","what","notifyParent","features","onFeaturesUpdated","on","e","MapboxDraw","displayControlsDefault","userProperties","defaultMode","clickBuffer","touchBuffer","modes","objectSpread","draw_circle","CircleMode","direct_select","DirectMode","simple_select","SimpleSelectMode","drag_circle","DragCircleMode","console","log","getAll","setTimeout","bind","assertThisInitialized","prevProps","prevState","snapshot","mode","length","deleteAll","changeMode","_this2","react_default","a","createElement","assign","onStyleLoad","React","Component","shapes","key","value","App","initialState","selectedShape","state","callback","get","prototype","classes","feature","center","properties","isCircle","coord","toFixed","className","src_Map","setState","shapeSelectContainer","FormControl","Select","onChange","find","shape","target","inputProps","name","id","MenuItem","IconButton","onClick","Delete","textContainer","concat","join","radiusInKm","withStyles","theme","zIndex","position","top","left","verticalAlign","right","bottom","background","paddingLeft","paddingRight","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d91d3bae.chunk.js","sourcesContent":["const REACT_APP_MAPBOX_ACCESS_TOKEN = 'pk.eyJ1IjoiaHllb25namlua2ltIiwiYSI6ImNpZXh4dXp5eDA2YjFzaGtyOGR2dnBza2oifQ.a5K673tSr0cOcYoX1rpPhg'\r\n\r\nmodule.exports = REACT_APP_MAPBOX_ACCESS_TOKEN","import React from \"react\";\r\nimport ReactMapboxGl from \"react-mapbox-gl\";\r\nimport MapboxDraw from \"@mapbox/mapbox-gl-draw\";\r\nimport \"@mapbox/mapbox-gl-draw/dist/mapbox-gl-draw.css\";\r\nimport {CircleMode, DirectMode, DragCircleMode, SimpleSelectMode,} from \"mapbox-gl-draw-circle\";\r\n\r\nconst REACT_APP_MAPBOX_ACCESS_TOKEN = require('./config')\r\nconst ReactMap = ReactMapboxGl({ accessToken: REACT_APP_MAPBOX_ACCESS_TOKEN });\r\n\r\nconst mapboxProps = {\r\n  style: \"mapbox://styles/mapbox/streets-v11\",\r\n  zoom: [13],\r\n  containerStyle: {\r\n    height: \"100vh\",\r\n    width: \"100%\",\r\n  }\r\n};\r\n\r\n\r\nclass Map extends React.Component {\r\n  constructor (props) {\r\n    super(props);\r\n    this.draw = new MapboxDraw({\r\n      displayControlsDefault: false,\r\n      userProperties: true,\r\n      defaultMode: \"draw_circle\",\r\n      clickBuffer: 10,\r\n      touchBuffer: 10,\r\n      modes: {\r\n        ...MapboxDraw.modes,\r\n        draw_circle: CircleMode,\r\n        direct_select: DirectMode,\r\n        simple_select: SimpleSelectMode,\r\n        drag_circle: DragCircleMode\r\n      }\r\n    });\r\n\r\n    this.what = function() {\r\n      console.log(this.draw.getAll().features);\r\n      setTimeout(this.what, 2000);\r\n    }.bind(this);\r\n  }\r\n\r\n  componentDidUpdate(prevProps, prevState, snapshot) {\r\n    if (prevProps.mode !== this.props.mode ||\r\n        this.props.features.length !== this.draw.getAll().features.length) {\r\n      console.log(this.props.mode);\r\n      this.draw.deleteAll();\r\n      this.draw.changeMode(this.props.mode);\r\n    }\r\n  }\r\n\r\n  onMapLoaded = map => {\r\n    map.addControl(this.draw);\r\n    this.what();\r\n\r\n    const notifyParent = (features) => this.props.onFeaturesUpdated(features);\r\n    map.on(\"draw.create\", e => notifyParent(e.features));\r\n    map.on(\"draw.update\", e => notifyParent(e.features));\r\n    map.on(\"draw.delete\", e => notifyParent(e.features));\r\n\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <ReactMap {...mapboxProps} onStyleLoad={map => this.onMapLoaded(map)} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Map;\r\n","import React from 'react';\r\nimport './App.css';\r\nimport Map from \"./Map\";\r\nimport {FormControl, IconButton, MenuItem, Select, withStyles} from '@material-ui/core';\r\nimport {Delete} from \"@material-ui/icons\";\r\n\r\n\r\nconst styles = theme => ({\r\n  map: {\r\n    zIndex: -1,\r\n    position: 'absolute',\r\n    top: 0,\r\n    left: 0,\r\n    width: '100%'\r\n  },\r\n  shapeSelectContainer: {\r\n    position: 'absolute',\r\n    verticalAlign: 'middle',\r\n    right: 16,\r\n    top: 16\r\n  },\r\n  textContainer: {\r\n    position: 'absolute',\r\n    bottom: 32,\r\n    left: 16,\r\n    background: '#eee',\r\n    paddingLeft: 16,\r\n    paddingRight: 16,\r\n  }\r\n});\r\n\r\nconst shapes = [\r\n  { key: 1, value: 'Circle', mode: 'draw_circle' },\r\n  { key: 2, value: 'Drag Circle', mode: 'drag_circle' },\r\n  { key: 3, value: 'Polygon', mode: 'draw_polygon' },\r\n  { key: 4, value: 'Line', mode: 'draw_line_string' },\r\n];\r\n\r\nclass App extends React.Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.initialState = {\r\n      selectedShape: shapes[0],\r\n      mode: shapes[0].mode,\r\n      features: []\r\n    };\r\n    this.state = { ...this.initialState };\r\n  }\r\n\r\n  setState(state, callback) {\r\n    super.setState(state, callback);\r\n    console.log('what');\r\n  }\r\n\r\n  render() {\r\n    const { classes } = this.props;\r\n    const feature = this.state.features[0];\r\n    const center = feature && feature.properties.isCircle ?\r\n        feature.properties.center.map(coord => coord.toFixed(3)) : [];\r\n    return (\r\n      <div>\r\n        <div className={classes.map}>\r\n          <Map\r\n            onFeaturesUpdated={\r\n              (features) => this.setState({features: features})\r\n            }\r\n            features={this.state.features}\r\n            mode={this.state.mode} />\r\n        </div>\r\n        <div className={classes.shapeSelectContainer}>\r\n          <FormControl>\r\n            <Select\r\n              value={this.state.selectedShape.key ? this.state.selectedShape.key : 0}\r\n              onChange={(e) => {\r\n                const selectedShape = shapes.find(shape => shape.key === e.target.value);\r\n                this.setState({\r\n                  selectedShape: selectedShape,\r\n                  mode: selectedShape.mode,\r\n                  features: []\r\n                })\r\n              }}\r\n              inputProps={{name: 'shape', id: 'shape-selector'}}>\r\n              {\r\n                shapes.map(shape =>\r\n                  <MenuItem key={shape.key} value={shape.key}>{shape.value}</MenuItem>\r\n                )\r\n              }\r\n            </Select>\r\n          </FormControl>\r\n          <IconButton onClick={() => this.setState({ ...this.initialState })}>\r\n            <Delete />\r\n          </IconButton>\r\n        </div>\r\n        <div className={classes.textContainer}>\r\n          <p>{`Center: [${center.join(', ')}]`}</p>\r\n          <p>\r\n            {\r\n              `Radius: ${feature && feature.properties.isCircle ? feature.properties.radiusInKm.toFixed(4) : '--'} kms`\r\n            }\r\n          </p>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default withStyles(styles)(App);\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}